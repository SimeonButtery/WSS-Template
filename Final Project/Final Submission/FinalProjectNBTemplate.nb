(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    273655,       6933]
NotebookOptionsPosition[    265262,       6778]
NotebookOutlinePosition[    266103,       6806]
CellTagsIndexPosition[    266060,       6803]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Generating Crossword Puzzles", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, 3.771754898106069*^9, {
   3.771763988201043*^9, 3.7717639895564404`*^9}, {3.7718074426822567`*^9, 
   3.771807444397221*^9}},ExpressionUUID->"49ab34ee-bfd5-49f5-beef-\
400d3cc456dd"],

Cell["Simeon Buttery", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.771754901465785*^9, 
  3.7717549037624598`*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell["Sylvia Haas", "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.7717549061507874`*^9, 3.77175491592376*^9}, {3.771763625156989*^9, 
  3.771763625854225*^9}},ExpressionUUID->"b70c649b-a958-4202-9f22-\
238ea1f9c7d4"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Starting Approaches", "Chapter"]], "Section",
 CellChangeTimes->{{3.771772224748805*^9, 3.7717722437050333`*^9}, {
  3.771807226285351*^9, 
  3.7718072509937572`*^9}},ExpressionUUID->"437c8e66-61b7-4631-9460-\
b8aa25894cd4"],

Cell[CellGroupData[{

Cell["\<\
At the beginning of my project I simply tried to put two words together. My \
first attempt at this was using Overlay.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771774849593586*^9, 3.771774851419945*^9}, {
   3.771774974486924*^9, 3.771775010224208*^9}, 3.771775504248073*^9, 
   3.771791262127191*^9},ExpressionUUID->"b819bb3d-7df0-46f9-b1b1-\
9a5790c6653d"],

Cell["\<\
This input overlays a column of the characters of a word and the characters \
of another word.\
\>", "Text",
 CellChangeTimes->{{3.771775019259651*^9, 3.771775020839965*^9}, {
  3.7717752659073563`*^9, 3.771775292697563*^9}, {3.7717755020662813`*^9, 
  3.771775502790073*^9}},ExpressionUUID->"c062b9c4-31b8-4207-9b51-\
7854e0b694c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Overlay", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Column", "[", 
      RowBox[{"Characters", "[", "\"\<talk\>\"", "]"}], "]"}], ",", 
     RowBox[{"Characters", "[", "\"\<lief\>\"", "]"}]}], "}"}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", ".8"}], ",", 
      RowBox[{"-", ".25"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771772245423346*^9, 3.771772286495954*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"c0f2c6d5-1c39-4a93-99ad-d3cad0002830"],

Cell[BoxData[
 OverlayBox[{
  TagBox[GridBox[{
     {"\<\"t\"\>"},
     {"\<\"a\"\>"},
     {"\<\"l\"\>"},
     {"\<\"k\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], 
  RowBox[{"{", 
   RowBox[{"\<\"l\"\>", ",", "\<\"i\"\>", ",", "\<\"e\"\>", 
    ",", "\<\"f\"\>"}], "}"}]},
  Alignment->{-0.8, -0.25}]], "Output",
 CellChangeTimes->{{3.77177226475637*^9, 3.771772287119348*^9}},
 CellLabel->
  "Out[350]=",ExpressionUUID->"9bbebc4b-b5c3-46dd-a139-d937282db202"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Then, I approached the problem differently and experimented with Grid, as I \
wanted to make a grid-like crossword.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771775479561947*^9, 3.771775511564467*^9}, {
   3.771780567061861*^9, 3.7717805775257273`*^9}, 
   3.7717912630220423`*^9},ExpressionUUID->"f33f3248-170d-416b-a803-\
38b4626fea15"],

Cell["\<\
This input uses grid to format a list of lists containing words.\
\>", "Text",
 CellChangeTimes->{{3.771775610548675*^9, 
  3.771775631832243*^9}},ExpressionUUID->"c10a770b-632c-4fda-88d7-\
d2008f55dce9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<l\>\"", ",", "\"\<i\>\"", ",", "\"\<v\>\"", ",", "\"\<e\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<e\>\"", ",", "\"\<\>\"", ",", "\"\<i\>\"", ",", "\"\<\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\"", ",", "\"\<a\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<f\>\"", ",", "\"\<\>\"", ",", "\"\<e\>\"", ",", "\"\<\>\""}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{3.771772369986734*^9},
 CellLabel->
  "In[352]:=",ExpressionUUID->"5d31b6af-2858-4f24-93ab-d380f52388e8"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"l\"\>", "\<\"i\"\>", "\<\"v\"\>", "\<\"e\"\>"},
    {"\<\"e\"\>", "\<\"\"\>", "\<\"i\"\>", "\<\"\"\>"},
    {"\<\"a\"\>", "\<\"b\"\>", "\<\"b\"\>", "\<\"a\"\>"},
    {"\<\"f\"\>", "\<\"\"\>", "\<\"e\"\>", "\<\"\"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.771772357480898*^9, 3.771772370896246*^9}},
 CellLabel->
  "Out[352]=",ExpressionUUID->"0e354969-8dcd-4e2c-a0b3-71b0e171c48c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I thought that I might need to call on letters of words, so I examined \
Associations in an attempt to get letters from words.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771775652268264*^9, 3.771775671738472*^9}, {
   3.771775787502322*^9, 3.771775787782494*^9}, {3.771780581682756*^9, 
   3.771780599183115*^9}, 
   3.7717912639778013`*^9},ExpressionUUID->"eff4c043-fd97-4960-b0bb-\
8dcb34a63c93"],

Cell["\<\
This input makes a simple association and calls upon what \[OpenCurlyQuote]b\
\[CloseCurlyQuote] is associated to.\
\>", "Text",
 CellChangeTimes->{{3.771775688278605*^9, 3.7717756933114367`*^9}, {
  3.771775750248481*^9, 
  3.771775774825523*^9}},ExpressionUUID->"b4fc16fc-8c1c-4983-b65f-\
21fd9f95d3a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], ",", 
    RowBox[{"\"\<b\>\"", "\[Rule]", "2"}]}], "\[RightAssociation]"}], "[", 
  "\"\<b\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7717724838550653`*^9, 3.771772490643528*^9}, {
  3.771772541266074*^9, 3.771772584069663*^9}, {3.771772676227543*^9, 
  3.771772685031307*^9}},
 CellLabel->
  "In[412]:=",ExpressionUUID->"8c32d05b-46e0-4cc2-8166-a019c8fcdd88"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.7717726854431753`*^9},
 CellLabel->
  "Out[412]=",ExpressionUUID->"0136d389-6cc5-4254-b674-ebe1bc710883"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Then I tried to combine all grids and associations by preparing variables for \
future code.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771778724862207*^9, 3.771778736251338*^9}, {
   3.771778802452668*^9, 3.7717788348729753`*^9}, {3.771780609141761*^9, 
   3.7717806225684347`*^9}, 
   3.7717912647068367`*^9},ExpressionUUID->"f4ad6d7d-0e0d-46fe-b034-\
f2b13b53f7df"],

Cell["\<\
This input makes variables for two words , the variable for each being the \
word itself, it\[CloseCurlyQuote]s hint, it\[CloseCurlyQuote]s association, \
and it\[CloseCurlyQuote]s reverse association.\
\>", "Text",
 CellChangeTimes->{{3.771778928318923*^9, 3.77177900213337*^9}, {
   3.77177935188041*^9, 3.771779368191408*^9}, 
   3.771789845654098*^9},ExpressionUUID->"d409f62e-fab2-49d2-9dc4-\
3557a6d6adb7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lotzwords", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<tractor\>\"", ",", "\"\<desk\>\"", ",", "\"\<screw\>\"", ",", 
     "\"\<drawer\>\"", ",", "\"\<phone\>\"", ",", "\"\<amoral\>\"", ",", 
     "\"\<gobbler\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Woord1", "=", 
   RowBox[{"{", "\"\<amoral\>\"", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hWord1", "=", " ", 
   RowBox[{"{", "\"\<not morally correct to do\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SmpWord", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Characters", "[", "Woord1", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AsSmpWord", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "SmpWord", "]"}], "]"}], ",", "SmpWord"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RevAsSmpWord", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"SmpWord", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "SmpWord", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Woord2", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Drop", "[", 
       RowBox[{"lotzwords", ",", 
        RowBox[{"{", 
         RowBox[{"-", "2"}], "}"}]}], "]"}], "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{"AsSmpWord", "[", "3", "]"}], "~~", "___"}], "]"}], "]"}]}], 
     ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hWord2", "=", 
   RowBox[{"{", "\"\<a person who gobbles their food rapidly\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NwWord", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Characters", "[", "Woord2", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AsNwWord", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "NwWord", "]"}], "]"}], ",", "NwWord"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RevAsNwWord", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"NwWord", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "NwWord", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"Black", ",", "Black", ",", 
         RowBox[{"AsNwWord", "[", "1", "]"}], ",", "Black", ",", "Black", ",",
          "Black"}], "}"}], "}"}], ",", 
      RowBox[{"{", "SmpWord", "}"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Black", ",", "Black", ",", 
          RowBox[{"AsNwWord", "[", "n", "]"}], ",", "Black", ",", "Black", 
          ",", "Black"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{
           RowBox[{"RevAsNwWord", "[", 
            RowBox[{"AsSmpWord", "[", "3", "]"}], "]"}], "+", "1"}], ",", 
          RowBox[{"Length", "[", "NwWord", "]"}], ",", "1"}], "}"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.771772691373556*^9, 3.771772765931608*^9}, {
  3.771772817713911*^9, 3.771772819513105*^9}, {3.7717806270312443`*^9, 
  3.771780656780345*^9}},
 CellLabel->
  "In[507]:=",ExpressionUUID->"92e91de2-5eba-470c-baf2-1005b225c5c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I used the variables in a Grid function to make a primitive crossword for a \
start.\
\>", "Subsubsection",
 CellChangeTimes->{{3.7717793841814423`*^9, 3.7717794176885967`*^9}, {
   3.771780842111301*^9, 3.7717808484615583`*^9}, 
   3.77179126610483*^9},ExpressionUUID->"68ea7ded-47e1-4c2d-b22a-\
7ff27f168509"],

Cell["\<\
This input makes a Grid of black and white squares based on lengths of the \
words and how they fit together.\
\>", "Text",
 CellChangeTimes->{{3.771779442876708*^9, 3.7717794972370367`*^9}, {
   3.77177953031938*^9, 3.7717795331354218`*^9}, 
   3.771789843102503*^9},ExpressionUUID->"fa67d7a5-6efb-4967-b7bb-\
cea7e3f10cb9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Grid", "[", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "Black", ",", "Black", ",", "White", ",", "Black", ",", "Black", 
           ",", "Black"}], "}"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{"White", ",", 
           RowBox[{"Length", "[", "SmpWord", "]"}]}], "]"}], "}"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "Black", ",", "Black", ",", "White", ",", "Black", ",", "Black", 
            ",", "Black"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Length", "[", "NwWord", "]"}], "-", 
           RowBox[{"RevAsNwWord", "[", 
            RowBox[{"AsSmpWord", "[", "3", "]"}], "]"}]}]}], "]"}]}], "]"}], 
      ",", 
      RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}], ",", "\"\<\>\"", ",", 
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{
      "\"\<Please fill the generated crossword with the terms which have the \
following hints: \>\"", ",", "hWord1", ",", "\"\< and \>\"", ",", "hWord2", 
       ",", "\"\<.\>\""}], "]"}], " ", "\"\<Thank you and have fun!\>\""}]}], 
   "}"}], "]"}]], "Input",
 CellLabel->
  "In[505]:=",ExpressionUUID->"48c1abb9-533b-492e-a126-4884dcfd7cfa"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "1", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False], 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]}
       },
       AutoDelete->False,
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"\"\>"},
    {
     RowBox[{"\<\"Please fill the generated crossword with the terms which \
have the following hints: not morally correct to do and a person who gobbles \
their food rapidly.\"\>", " ", "\<\"Thank you and have fun!\"\>"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.77177264576075*^9, 3.771772838164545*^9, 
  3.771779424040691*^9, 3.771780643728877*^9},
 CellLabel->
  "Out[505]=",ExpressionUUID->"5dcd2926-a0dd-4aec-b2cf-5c30d75e322d"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Final Result Preparation", "Chapter"]], "Section",
 CellChangeTimes->{{3.771667676758008*^9, 3.7716677137253942`*^9}, {
  3.7718075103581343`*^9, 
  3.771807522397258*^9}},ExpressionUUID->"05f2bcaa-ccd7-49d1-b7ba-\
1fb096457cc3"],

Cell[CellGroupData[{

Cell["\<\
After some development, I managed to finish my project based heavily on the \
first few things I tried, but just adding more words and making it look \
nicer. My explained finished project follows:\
\>", "Subsection",
 CellChangeTimes->{{3.771779574855579*^9, 3.771779578163118*^9}, {
  3.771779666298457*^9, 3.7717797085415*^9}, {3.771780111730077*^9, 
  3.7717801301973333`*^9}, {3.77178086058891*^9, 
  3.7717808708900003`*^9}},ExpressionUUID->"8cc7d6a5-21f9-48c3-9bd2-\
8aac6992e255"],

Cell[CellGroupData[{

Cell["\<\
First I cleared all the variables just in case anything was left over from \
previous code.\
\>", "Subsubsection",
 CellChangeTimes->{{3.7715816435267973`*^9, 3.771581653090506*^9}, {
   3.7717801334788303`*^9, 3.771780167623931*^9}, {3.771780877223596*^9, 
   3.771780894378193*^9}, 
   3.7717912704067287`*^9},ExpressionUUID->"e3acd316-25e4-450e-b24f-\
099a4da38599"],

Cell[TextData[StyleBox["This input clears all variables and functions .",
 FontSlant->"Plain"]], "Text",
 CellChangeTimes->{{3.7717801513124847`*^9, 3.7717801809696913`*^9}},
 FontSlant->"Italic",ExpressionUUID->"ccd87962-3fc0-4294-af52-ba75d8f14a94"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{
  "Word1", ",", "Word2", ",", "Word3", ",", "Word4", ",", "Word5", ",", 
   "Word6", ",", "Word7", ",", "Word8", ",", "Word9", ",", "Word10", ",", 
   "Word11", ",", "Word12", ",", "Word13", ",", "Word14", ",", "Word15", ",", 
   "lotswords", ",", "charwordprep", ",", "aswordprep", ",", "hintwordprep", 
   ",", "lengthwordprep", ",", "solvecheck", ",", "firstletters", ",", 
   "hintlength", ",", "wordbank", ",", "showanswers", ",", "pattern", ",", 
   "input", ",", "BlackSquare", ",", "WhiteSquares", ",", "fillercross", ",", 
   "correctlist", ",", "minicross", ",", "horizhintz", ",", "verthintz"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715128542682962`*^9, 3.771512884751274*^9}, {
  3.771581741614867*^9, 3.7715817582960043`*^9}, {3.771585086747436*^9, 
  3.771585117855093*^9}, {3.771612819299287*^9, 3.771612823149096*^9}, {
  3.771758034343624*^9, 3.771758140976864*^9}},
 CellLabel->
  "In[519]:=",ExpressionUUID->"018497b1-d31c-41a7-925b-97a3677a97a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Then I filtered out all profane words so that none would come up accidentally \
to prevent any embarrassment.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771581823061441*^9, 3.77158184770818*^9}, {
   3.77178018760149*^9, 3.771780246107627*^9}, {3.771780902190219*^9, 
   3.771780906773526*^9}, {3.771790403547871*^9, 3.771790415351131*^9}, 
   3.7717912712927856`*^9},ExpressionUUID->"18943376-a52b-44fc-b84b-\
0457eab12b10"],

Cell["\<\
This input picks all values in WordData[] that have a probability of being \
profane which is under 50%.\
\>", "Text",
 CellChangeTimes->{{3.7717802317301397`*^9, 3.7717803016820183`*^9}, 
   3.7717898389367523`*^9},ExpressionUUID->"534de0b9-5eb6-4260-8042-\
c8333f295057"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lotswords", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"WordData", "[", "]"}], ",", 
    RowBox[{"First", "/@", 
     RowBox[{"Values", "[", 
      RowBox[{"KeyTake", "[", 
       RowBox[{
        RowBox[{"Classify", "[", 
         RowBox[{"\"\<Profanity\>\"", ",", 
          RowBox[{"WordData", "[", "]"}], ",", "\"\<Probabilities\>\""}], 
         "]"}], ",", "True"}], "]"}], "]"}]}], ",", 
    RowBox[{"p_", "/;", 
     RowBox[{"p", "<", "0.5"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.771780688861157*^9},
 CellLabel->
  "In[521]:=",ExpressionUUID->"87d4994d-63dd-4949-8628-8bbedb0846b9"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"0\"\>", ",", "\<\"1\"\>", ",", "\<\"10\"\>", 
           ",", "\<\"100\"\>", ",", "\<\"1000\"\>", ",", "\<\"10000\"\>", 
           ",", "\<\"100000\"\>", ",", 
           TemplateBox[{"148745"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"zymology\"\>", 
           ",", "\<\"zymolysis\"\>", ",", "\<\"zymolytic\"\>", 
           ",", "\<\"zymosis\"\>", ",", "\<\"zymotic\"\>", 
           ",", "\<\"zymurgy\"\>", ",", "\<\"Zyrian\"\>"}], "}"}],
         Short[#, 
          Rational[5, 8]]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{43., {2., 6.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{37., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{37., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 521, 26346232495879258454, Rational[5, 8]/
             2],
           Enabled->False,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{41., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{41., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 521, 26346232495879258454, Rational[5, 8] 
             2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{31., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{31., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 521, 26346232495879258454, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{56., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{56., {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[26346232495879258454 === $SessionID, 
   Out[521], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.7717806868642397`*^9, 3.771780704987705*^9}},
 CellLabel->
  "Out[521]=",ExpressionUUID->"de67136b-6f4a-43bb-86a7-5aafcb480500"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
After that, I defined functions  instead of a bunch of variables for each \
word in an attempt to shorten my code.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771581656069919*^9, 3.771581687782901*^9}, {
   3.771581782283011*^9, 3.771581813282545*^9}, {3.7717803078563833`*^9, 
   3.77178030804291*^9}, {3.771780922934902*^9, 3.771780945897931*^9}, {
   3.771781032659298*^9, 3.7717810671794443`*^9}, 
   3.771791273171577*^9},ExpressionUUID->"aa4f6fb3-b9ce-4b49-8fc7-\
6ec64fa93687"],

Cell["\<\
These inputs make functions for characters, associations, hints, and lengths \
for each word based on the given word\
\>", "Text",
 CellChangeTimes->{{3.771780987085327*^9, 3.7717809915056334`*^9}, {
  3.771781021506194*^9, 3.77178102410741*^9}, {3.771781070194488*^9, 
  3.7717811102888536`*^9}},ExpressionUUID->"f4d8429f-2d36-4987-8688-\
e28a3c341e0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Function", " ", "for", " ", "the", " ", "characters"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"charwordprep", "[", "Word_", "]"}], ":=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Characters", "[", "Word", "]"}], "]"}]}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Function", " ", "for", " ", "the", " ", "associations"}], "*)"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"aswordprep", "[", "Word_", "]"}], ":=", " ", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"wWord", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Characters", "[", "Word", "]"}], "]"}]}], "}"}], ",", " ", 
      RowBox[{"AssociationThread", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "wWord", "]"}], "]"}], ",", " ", "wWord"}], 
       "]"}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Function", " ", "for", " ", "the", " ", "hints"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"hintwordprep", "[", "Word_", "]"}], " ", ":=", 
    RowBox[{"Part", "[", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"WordData", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{"ToString", "[", "Word", "]"}], ",", "1"}], "]"}], ",", 
             RowBox[{"-", "1"}]}], "]"}], ",", "\"\<Definitions\>\""}], "]"}],
          ",", "1"}], "]"}], "]"}], ",", "2"}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Function", " ", "for", " ", "the", " ", "lengths"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lengthwordprep", "[", "Word_", "]"}], ":=", 
    RowBox[{"ToString", "@", 
     RowBox[{"Length", "[", 
      RowBox[{"charwordprep", "[", "Word", "]"}], "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, {3.7715121984390373`*^9, 3.771512233705634*^9}, {
   3.771512289158661*^9, 3.771512387913877*^9}, {3.7715124467427673`*^9, 
   3.771512449214979*^9}, 3.771512484762887*^9, {3.771512808055623*^9, 
   3.771512810238611*^9}, 3.771512849582024*^9, 3.771512890378057*^9, {
   3.771521988962161*^9, 3.7715219890965557`*^9}, {3.771522664763032*^9, 
   3.771522670345565*^9}, {3.771581739451301*^9, 3.771581760712276*^9}, {
   3.771581851985346*^9, 3.77158190307555*^9}, {3.771581975321404*^9, 
   3.771581986174086*^9}, 3.7715874775699787`*^9},
 CellLabel->
  "In[522]:=",ExpressionUUID->"71dddbf0-4042-4bf5-8d05-e9bfc9b883ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I had to manually define a variable for each word due to a problem I \
encountered if I used a function. This was due to how if i made this a \
function, it would call on other functions which could call back upon it. \
Then there would be an Infinite loop, which would not be fun. There is one \
problem with this code and that is that sometimes there is an error due to \
how there isn\[CloseCurlyQuote]t a word in the English language that fits the \
specification that the computer generates.\
\>", "Subsubsection",
 CellChangeTimes->{{3.7715814326058893`*^9, 3.771581556155167*^9}, {
  3.771781113821704*^9, 3.771781260837401*^9}, {3.7717813271404533`*^9, 
  3.77178133050275*^9}, {3.771781363180139*^9, 3.771781363636517*^9}, {
  3.771781432457077*^9, 
  3.771781500232609*^9}},ExpressionUUID->"37152a49-75f5-459a-9227-\
9f888040f78c"],

Cell["\<\
This input makes variables which pick a random word that is X letters long \
from lotswords, with letter(s) Y that is the Nth letter in the word.\
\>", "Text",
 CellChangeTimes->{{3.7717813337525806`*^9, 
  3.771781346267411*^9}},ExpressionUUID->"911249c8-7e8d-4a8d-8056-\
9d690f38677d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Word1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
        "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_",
          "~~", "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Word2", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "4", "]"}], "~~", 
         "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_"}], "]"}], "]"}]}], 
     ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word3", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "6", "]"}], "~~", 
         "_", "~~", "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Word4", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "6", "]"}], "~~", 
         "_", "~~", "_", "~~", "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "4", "]"}], "~~", 
         "_", "~~", "_", "~~", "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word5", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", "_", "~~", "_", "~~", "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "4", "]"}], "~~", 
         "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "4", "]"}], "~~", 
         "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word6", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "1", "]"}], "~~", 
         "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_"}], "]"}], 
       "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word7", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "8", "]"}], "~~", 
         "_", "~~", "_", "~~", "_", "~~", "_", "~~", "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "10", "]"}]}], 
        "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word8", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "8", "]"}], "~~", 
         "_", "~~", "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Word9", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", "_", "~~", "_", "~~", "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "5", "]"}], "~~", 
         "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word10", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "8", "]"}], "~~", 
         "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word11", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "4", "]"}]}], "]"}],
        "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word12", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "5", "]"}], "~~", 
         "_", "~~", "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word13", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "7", "]"}]}], "]"}],
        "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word14", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "2", "]"}]}], "]"}],
        "]"}]}], ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Word15", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"lotswords", "//", 
      RowBox[{"Select", "[", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "2", "]"}], "~~", 
         "_", "~~", 
         RowBox[{
          RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "3", "]"}], "~~", 
         "_"}], "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, {3.7715121984390373`*^9, 3.771512233705634*^9}, {
   3.771512289158661*^9, 3.771512387913877*^9}, {3.7715124467427673`*^9, 
   3.771512449214979*^9}, 3.771512484762887*^9, {3.771512808055623*^9, 
   3.771512810238611*^9}, 3.771512849582024*^9, {3.771512890378057*^9, 
   3.7715128930190487`*^9}, {3.7715129424455347`*^9, 3.771512961976797*^9}, {
   3.7715183564877977`*^9, 3.771518447374075*^9}, {3.771518667362763*^9, 
   3.771519019145565*^9}, {3.771581572047022*^9, 3.7715815796817837`*^9}, {
   3.771585176035351*^9, 3.7715851812995872`*^9}, 3.771612859351329*^9, {
   3.771612901473548*^9, 3.7716129139995947`*^9}},
 CellLabel->
  "In[541]:=",ExpressionUUID->"bb3df474-3bc6-4682-8c63-efc4c6c593bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I then started to define variables that gave options for hints regarding the \
first letter of the words, hints regarding the length of the words, and a \
word bank containing all the words. I made this so that the crossword could \
be easier to solve, or in other words not impossible.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771581132947605*^9, 3.771581226772707*^9}, {
   3.771581593454801*^9, 3.771581596219811*^9}, {3.771781541519474*^9, 
   3.771781618700901*^9}, {3.7717817073933907`*^9, 3.771781754412204*^9}, 
   3.7717912768167963`*^9},ExpressionUUID->"3def84c7-a647-46f9-8f92-\
87c3edc877b1"],

Cell["\<\
These inputs make variables which each contain a joined string of first \
letter hints, a joined string of length hints, or a joined string of all the \
words.\
\>", "Text",
 CellChangeTimes->{{3.771781802526132*^9, 
  3.771781889868054*^9}},ExpressionUUID->"0f4ac54b-2cbc-4df3-9c0d-\
c1d376c4dc49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Extra", " ", "Hints", " ", "Option", " ", "for", " ", "first", " ", 
    "letter", " ", "of", " ", "Words"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"firstletters", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<First Letters of Hints: Hint 1: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 2: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 3: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 4: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 5: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 6: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 7: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word13", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 8: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word14", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 9: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 10: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 11: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 12: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 13: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word10", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 14: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "1", "]"}], ",", 
       "\"\<, Hint 15: \>\"", ",", 
       RowBox[{
        RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "1", "]"}], ",", 
       "\"\<.\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Extra", " ", "Hints", " ", "Option", " ", "for", " ", "Length", " ", 
     "of", " ", "Words"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"hintlength", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<Lengths of Hints: Hint 1: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word1", "]"}], ",", 
       "\"\<, Hint 2: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word3", "]"}], ",", 
       "\"\<, Hint 3: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word5", "]"}], ",", 
       "\"\<, Hint 4: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word7", "]"}], ",", 
       "\"\<, Hint 5: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word8", "]"}], ",", 
       "\"\<, Hint 6: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word11", "]"}], ",", 
       "\"\<, Hint 7: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", 
        RowBox[{"Word", "[", "13", "]"}], "]"}], ",", "\"\<, Hint 8: \>\"", 
       ",", 
       RowBox[{"lengthwordprep", "[", "Word14", "]"}], ",", 
       "\"\<, Hint 9: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word2", "]"}], ",", 
       "\"\<, Hint 10: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word4", "]"}], ",", 
       "\"\<, Hint 11: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word6", "]"}], ",", 
       "\"\<, Hint 12: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word9", "]"}], ",", 
       "\"\<, Hint 13: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word10", "]"}], ",", 
       "\"\<, Hint 14: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word11", "]"}], ",", 
       "\"\<, Hint 15: \>\"", ",", 
       RowBox[{"lengthwordprep", "[", "Word15", "]"}], ",", "\"\<.\>\""}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Wordbank", " ", "Option", " ", "containing", " ", "shuffled", " ", 
     "list", " ", "of", " ", "words"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wordbank", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{
      "\"\<Wordbank: \>\"", ",", "Word5", ",", "\"\<, \>\"", ",", "Word7", 
       ",", "\"\<, \>\"", ",", "Word3", ",", "\"\<, \>\"", ",", "Word4", ",", 
       "\"\<, \>\"", ",", "Word12", ",", "\"\<, \>\"", ",", "Word15", ",", 
       "\"\<, \>\"", ",", "Word2", ",", "\"\<, \>\"", ",", "Word1", ",", 
       "\"\<, \>\"", ",", "Word10", ",", "\"\<, \>\"", ",", "Word6", ",", 
       "\"\<, \>\"", ",", "Word11", ",", "\"\<, \>\"", ",", "Word8", ",", 
       "\"\<, \>\"", ",", "Word13", ",", "\"\<, \>\"", ",", "Word14", ",", 
       "\"\<, \>\"", ",", "Word9", ",", "\"\<.\>\""}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, 3.7715120467326717`*^9, {3.771512137900934*^9, 
   3.7715121647236633`*^9}, {3.77151904824713*^9, 3.771519170219722*^9}, {
   3.7715192033600883`*^9, 3.7715193279802637`*^9}, 3.7715218080705557`*^9, {
   3.771521864863736*^9, 3.7715219716549263`*^9}, {3.771522230135253*^9, 
   3.771522237121333*^9}, {3.771581380711783*^9, 3.771581412142065*^9}},
 CellLabel->
  "In[556]:=",ExpressionUUID->"ba591f8b-8a7c-4902-9f14-9a6d921c59ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
After that, I defined a variable for an answer key that contained the answers \
in the correct 10x10 crossword format to make it easy for the eye.\
\>", "Subsubsection",
 CellChangeTimes->{{3.7715804671299887`*^9, 3.7715804817430058`*^9}, {
   3.771581085826386*^9, 3.771581112776496*^9}, {3.771581238772167*^9, 
   3.77158126540521*^9}, {3.77158129913942*^9, 3.771581300390307*^9}, {
   3.771581364409891*^9, 3.771581369144957*^9}, {3.7715814431813726`*^9, 
   3.771581444030932*^9}, {3.771781910718729*^9, 3.771781937630191*^9}, {
   3.771790384555024*^9, 3.7717903905643806`*^9}, 
   3.77179127933465*^9},ExpressionUUID->"85e5056c-a3dd-4e9d-9f51-\
8482fed97048"],

Cell["\<\
This input makes a small grid with the correct answers by using lists \
containing elements from associations.\
\>", "Text",
 CellChangeTimes->{{3.7717820206443977`*^9, 3.7717820229802027`*^9}, {
   3.771782220046777*^9, 3.771782225673312*^9}, {3.77178248275107*^9, 
   3.771782527770973*^9}, 
   3.7717898308935347`*^9},ExpressionUUID->"73962f69-25dc-40b7-884d-\
aacb6110a929"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"showanswers", "=", 
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{"Join", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Row", " ", "1"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "1", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "1", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "1", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word10", "]"}], "[", "1", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}]}], "}"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "x", "]"}], 
               ",", "50"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "9", ",", "1"}], "}"}]}], "]"}], 
           "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "1", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "3", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "3", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "3", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word10", "]"}], "[", "3", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}]}], "}"}], "]"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "x", "]"}], 
               ",", "50"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "8", ",", "1"}], "}"}]}], "]"}], 
           "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "1", "]"}], ",", 
            "50"}], "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"Row", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "3", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "5", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "5", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "5", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word14", "]"}], "[", "1", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "2", "]"}], ",", 
            "50"}], "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"Row", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "4", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "x", "]"}], 
               ",", "50"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "5", ",", "1"}], "}"}]}], "]"}], 
           "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "3", "]"}], ",", 
            "50"}], "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"Row", " ", "7"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "5", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word12", "]"}], "[", "2", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word12", "]"}], "[", "3", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "7", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "7", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "4", "]"}], ",", 
           "50"}], "]"}]}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "8"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "6", "]"}], ",", 
            "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "1", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "x", "]"}], 
               ",", "50"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "5", ",", "1"}], "}"}]}], "]"}], 
           "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "9"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "7", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "2", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "9", "]"}], ",", 
           "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"Black", ",", "50"}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "6", "]"}], ",", 
           "50"}], "]"}]}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Row", " ", "10"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "x", "]"}], 
               ",", "50"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "7", ",", "1"}], "}"}]}], "]"}], 
           "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"Black", ",", "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word13", "]"}], "[", "1", "]"}], ",",
             "50"}], "]"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "7", "]"}], ",", 
            "50"}], "]"}]}], "}"}], "]"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}], ",", 
    RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, 3.7715120467326717`*^9, 3.771512137900934*^9, {
   3.771521183091291*^9, 3.771521238626624*^9}, {3.771521294889304*^9, 
   3.771521314646401*^9}, {3.771521366176553*^9, 3.771521432846467*^9}, {
   3.7715214822178183`*^9, 3.771521548968191*^9}, {3.771521614209839*^9, 
   3.771521653304102*^9}, {3.771521713011817*^9, 3.7715217841480207`*^9}, {
   3.771522238913282*^9, 3.771522240202889*^9}, {3.771581302392043*^9, 
   3.771581357254937*^9}, {3.77176137562547*^9, 3.771761392040379*^9}, {
   3.77178253260887*^9, 3.771782553217401*^9}},
 CellLabel->
  "In[561]:=",ExpressionUUID->"5019dfcf-f90b-4d5a-9cbc-35c841232830"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"w\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"I\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"p\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"r\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"e\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"d\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\" \"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"h\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"i\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"f\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"t\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"I\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"e\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"E\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"t\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"d\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\" \"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"c\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"k\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"p\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"d\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"i\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"p\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"t\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"r\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"m\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"p\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"r\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"t\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"b\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"e\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"e\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"z\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"l\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"i\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"n\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"r\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"i\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"h\"\>",
      StripOnInput->False,
      FontSize->50]},
    {
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"g\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"n\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"o\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"s\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"i\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox[
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0],
       Editable->False,
       Selectable->False],
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50], 
     StyleBox["\<\"a\"\>",
      StripOnInput->False,
      FontSize->50]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.771782533045536*^9, 3.771782555310807*^9}},
 CellLabel->
  "Out[561]=",ExpressionUUID->"09b2443a-27f0-47be-a4ca-0a724e858587"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I finally got around to defining functions and variable to create the main \
crossword itself that can be filled in and retains it\[CloseCurlyQuote]s \
content so that it wont disappear randomly.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771615266159542*^9, 3.771615291458042*^9}, {
   3.771782569964507*^9, 3.7717826145065937`*^9}, {3.771782650655442*^9, 
   3.7717826830548077`*^9}, 3.77178957600734*^9, {3.771790371724805*^9, 
   3.7717903783947763`*^9}, 
   3.771791283639834*^9},ExpressionUUID->"5acd3556-eca0-4dbf-9f80-\
1f8b33360889"],

Cell["\<\
This input makes a pattern using lists, black and white squares, and then \
uses these variables, grid, map, and slots to form the crossword itself.\
\>", "Text",
 CellChangeTimes->{{3.771782695849169*^9, 3.77178276875213*^9}, {
  3.7717898282283783`*^9, 
  3.771789828580221*^9}},ExpressionUUID->"5d3c7ad7-2dcd-44e4-9123-\
50e93b3afe07"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pattern", " ", "=", " ", "\[IndentingNewLine]", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
        "1", ",", "0", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0", ",", "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
        "1", ",", "0", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0", ",", "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
        "1", ",", "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0", ",", "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
        "1", ",", "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
        "0", ",", "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", 
        "1", ",", "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"input", " ", "=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{"Null", ",", " ", "100"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BlackSquare", "=", " ", 
   RowBox[{"Style", "[", 
    RowBox[{"Black", ",", "100"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"WhiteSquares", "[", "i_", "]"}], ":=", " ", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"InputField", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", 
         RowBox[{"input", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"FieldSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1.2", ",", "1"}], "}"}]}]}], "]"}], ",", "60"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fillercross", " ", "=", " ", 
   RowBox[{"Framed", "[", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"MapIndexed", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#1", " ", "\[Equal]", " ", "1"}], ",", "BlackSquare", 
              ",", 
              RowBox[{"WhiteSquares", "[", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
           " ", 
           RowBox[{"Flatten", "[", "pattern", "]"}]}], "]"}], ",", "10"}], 
        "]"}], ",", 
       RowBox[{"Background", "\[Rule]", "Black"}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", "Black"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.77161525185518*^9, 3.771615261361238*^9}, {
   3.7716679297915773`*^9, 3.771667951333015*^9}, 3.771676319212996*^9, {
   3.771676405480874*^9, 3.771676421019141*^9}, {3.771677935885635*^9, 
   3.771677938719862*^9}, {3.771678150716308*^9, 3.771678257829299*^9}, {
   3.7716783187403803`*^9, 3.771678365662273*^9}, {3.7716784268529778`*^9, 
   3.771678430719371*^9}, {3.771678490963078*^9, 3.771678535720983*^9}, {
   3.771678582759622*^9, 3.77167863527429*^9}, 3.771684063392929*^9, {
   3.771694524957445*^9, 3.771694526853218*^9}, {3.771760941506781*^9, 
   3.7717609496241207`*^9}, {3.771760995589864*^9, 3.77176101310771*^9}, {
   3.77176104645819*^9, 3.7717610474727*^9}, {3.771761080766086*^9, 
   3.7717610852166862`*^9}, 3.771761166638151*^9, 3.771763259779377*^9, 
   3.771782773032485*^9},
 CellLabel->
  "In[562]:=",ExpressionUUID->"aaf32241-e359-4a06-ba51-d8112200b314"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Following that, I defined a correct solution checker variable so that I would \
have a solution to compare to in order to check it.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771609517044059*^9, 3.771609533951119*^9}, {
   3.771789653045765*^9, 3.7717896880588083`*^9}, {3.771789862884549*^9, 
   3.771789863095495*^9}, {3.7717903643169327`*^9, 3.771790368531804*^9}, 
   3.771791285205634*^9},ExpressionUUID->"64925cbd-99e2-4d4a-badf-\
54527df4677d"],

Cell[TextData[StyleBox["This input creates a list to compare what the user\
\[CloseCurlyQuote]s response is to by calling characters from associations.",
 FontSlant->"Plain"]], "Text",
 CellChangeTimes->{{3.7717897003048353`*^9, 3.771789713054923*^9}, {
  3.771789776455289*^9, 3.7717898256598053`*^9}},
 FontSlant->"Italic",ExpressionUUID->"9d6209ff-a2b1-4ff7-b4c4-19995966ea92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correctlist", "=", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Row", " ", "1"}], "*)"}], "\[IndentingNewLine]", " ", 
   RowBox[{"\"\< \>\"", ",", "\"\< \>\"", " ", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word10", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "2"}], "*)"}], "\[IndentingNewLine]", "\"\< \>\"", 
    ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "3", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "4", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "5", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "6", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "7", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "8", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word1", "]"}], "[", "9", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word10", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "3", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "4", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "5", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "6", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "7", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word5", "]"}], "[", "8", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "1", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word15", "]"}], "[", "5", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "5", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "5", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word14", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word14", "]"}], "[", "2", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "4", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "3", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "4", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word3", "]"}], "[", "5", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "3", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "7"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "5", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word12", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word12", "]"}], "[", "3", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word2", "]"}], "[", "7", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "7", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "4", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "8"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "6", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "1", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "3", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "4", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word8", "]"}], "[", "5", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "9"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word6", "]"}], "[", "7", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word11", "]"}], "[", "2", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word4", "]"}], "[", "9", "]"}], ",", 
    "\"\< \>\"", ",", "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word9", "]"}], "[", "6", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Row", " ", "10"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "2", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "3", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "4", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "5", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "6", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word7", "]"}], "[", "7", "]"}], ",", 
    "\"\< \>\"", ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word13", "]"}], "[", "1", "]"}], ",", 
    RowBox[{
     RowBox[{"aswordprep", "[", "Word13", "]"}], "[", "2", "]"}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{
  3.771609540214306*^9, {3.7716127016016397`*^9, 3.771612703088048*^9}, 
   3.77175801720807*^9, 3.7717896944583597`*^9},
 CellLabel->
  "In[616]:=",ExpressionUUID->"f1feb3ff-fc70-4112-a927-fc25b8efef3a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\" \"\>", ",", "\<\" \"\>", ",", "\<\"w\"\>", ",", "\<\" \"\>", 
   ",", "\<\"I\"\>", ",", "\<\" \"\>", ",", "\<\"p\"\>", ",", "\<\" \"\>", 
   ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\"r\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"d\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", 
   ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"f\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"I\"\>", ",", "\<\" \"\>", ",", "\<\"e\"\>", ",", "\<\" \"\>", 
   ",", "\<\"E\"\>", ",", "\<\" \"\>", ",", "\<\"o\"\>", ",", "\<\" \"\>", 
   ",", "\<\"t\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"d\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"k\"\>", ",", "\<\" \"\>", ",", "\<\"p\"\>", 
   ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
   ",", "\<\"d\"\>", ",", "\<\" \"\>", ",", "\<\"o\"\>", ",", "\<\" \"\>", 
   ",", "\<\"s\"\>", ",", "\<\"i\"\>", ",", "\<\"p\"\>", ",", "\<\" \"\>", 
   ",", "\<\" \"\>", ",", "\<\"t\"\>", ",", "\<\"r\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"p\"\>", ",", "\<\" \"\>", ",", "\<\"r\"\>", 
   ",", "\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\" \"\>", 
   ",", "\<\"a\"\>", ",", "\<\" \"\>", ",", "\<\"e\"\>", ",", "\<\" \"\>", 
   ",", "\<\" \"\>", ",", "\<\"a\"\>", ",", "\<\"e\"\>", ",", "\<\" \"\>", 
   ",", "\<\" \"\>", ",", "\<\"z\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"a\"\>", ",", "\<\"i\"\>", ",", "\<\"n\"\>", 
   ",", "\<\"r\"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\"o\"\>", 
   ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\" \"\>", 
   ",", "\<\" \"\>", ",", "\<\"h\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"s\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"a\"\>", ",", "\<\" \"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.771789695744041*^9, 3.771790449168976*^9},
 CellLabel->
  "Out[616]=",ExpressionUUID->"4bba5503-c3c1-4ec1-815a-becf8c30f5a2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
I created a checking variable that checks the user\[CloseCurlyQuote]s \
response and prints whether or not it\[CloseCurlyQuote]s correct so that the \
user would know if they did well.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771616672076548*^9, 3.771616683940548*^9}, {
   3.771789866632597*^9, 3.7717898852335443`*^9}, {3.771790017847609*^9, 
   3.771790114972848*^9}, {3.7717903499202414`*^9, 3.771790359663995*^9}, 
   3.7717912871075363`*^9},ExpressionUUID->"823051a6-d3fe-46be-8c4a-\
93c1f8081073"],

Cell["\<\
These inputs first create a function to make a word rainbow, but then more \
importantly use an If statement to check if the user\[CloseCurlyQuote]s \
response is correct\
\>", "Text",
 CellChangeTimes->{{3.771790281708024*^9, 
  3.771790346527376*^9}},ExpressionUUID->"1e0d9d77-fc81-4bb3-9cd6-\
5244f0494f91"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"colorize2", "[", 
   RowBox[{"str_String", ",", "cf_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Row", "@", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Style", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"cf", "/@", 
           RowBox[{"Subdivide", "[", 
            RowBox[{
             RowBox[{"Length", "@", "#"}], "-", "1"}], "]"}]}]}], "}"}], 
        "&"}], "@", 
       RowBox[{"Characters", "@", "str"}]}]}], "]"}]}], "~", "ToString", "~", 
   "StandardForm"}]}], "\n", 
 RowBox[{
  RowBox[{"solvecheck", "=", 
   RowBox[{"Dynamic", "[", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringDrop", "[", 
          RowBox[{
           RowBox[{"StringReplace", "[", 
            RowBox[{
             RowBox[{"ToString", "[", "input", "]"}], ",", 
             RowBox[{"\"\<Null\>\"", "\[Rule]", "\"\< \>\""}]}], "]"}], ",", 
           "1"}], "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}], "==", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringDrop", "[", 
          RowBox[{
           RowBox[{"ToLowerCase", "[", 
            RowBox[{"ToString", "[", "correctlist", "]"}], "]"}], ",", "1"}], 
          "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ",", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"colorize2", "[", 
         RowBox[{"\"\<This is correct!\>\"", ",", 
          RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}]}], "]"}], ",", 
        "Bold", ",", "140"}], "]"}], ",", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<Sorry... try again...\>\"", ",", "Bold", ",", "40"}], 
       "]"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.771761712236558*^9, 3.771761748110908*^9}, {
   3.771762264595241*^9, 3.771762295608858*^9}, {3.771762418943851*^9, 
   3.771762421433234*^9}, {3.771762456355975*^9, 3.771762539198163*^9}, 
   3.7717626370910473`*^9, 3.771762750721662*^9, {3.771762793314486*^9, 
   3.771762809896331*^9}, {3.771762985687079*^9, 3.771762986434661*^9}, {
   3.771790435970909*^9, 3.7717904532875853`*^9}},
 CellLabel->
  "In[617]:=",ExpressionUUID->"d322f934-cbcc-4b52-9777-8f73ef3b9b63"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Then I made a mini crossword in a Grid showing the positioning of each hinted \
word.\
\>", "Subsubsection",
 CellChangeTimes->{{3.771694467228795*^9, 3.771694485005679*^9}, {
   3.771790430528099*^9, 3.771790430762987*^9}, {3.771790592665694*^9, 
   3.771790610360156*^9}, {3.771790805489963*^9, 3.7717908147549057`*^9}, 
   3.77179128885942*^9},ExpressionUUID->"09ba9118-43e4-43ea-bddd-\
2476d28030b6"],

Cell["\<\
This input makes a variable that is a Grid of a small blank crossword with \
only the numbers of where each word goes by using lists of styled items.\
\>", "Text",
 CellChangeTimes->{{3.771790818598735*^9, 3.77179089738762*^9}, 
   3.771790983987132*^9},ExpressionUUID->"5242248f-cecd-4054-bac0-\
4710524b2bb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "follwowing", " ", "gives", " ", "the", " ", "postiotion", " ",
     "of", " ", "each", " ", "word", " ", "in", " ", "a", " ", "mini", " ", 
    "crossword"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"minicross", "=", 
    RowBox[{"Grid", "[", 
     RowBox[{
      RowBox[{"Join", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Row", " ", "1"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<15\>\"", ",", "15"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<9\>\"", ",", "15"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<10 \>\"", ",", "15"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<13\>\"", ",", "15"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}]}], "}"}], "}"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<1\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{"\"\<\>\"", ",", "6"}], "]"}], "]"}], ",", "\"\<\>\""}],
            "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<11\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}]}], "}"}], "]"}], "}"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<3\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Table", "[", 
             RowBox[{"\"\<\>\"", ",", "7"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<12\>\"", ",", "15"}], "]"}]}], "}"}], "]"}], "}"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<8\>\"", ",", "15"}], "]"}], ",", "\"\<\>\""}], 
           "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<2\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{"\"\<\>\"", ",", "4"}], "]"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\""}], "}"}], 
          "]"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "7"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"\"\<6\>\"", ",", "15"}], "]"}], ",", "\"\<\>\"", ",", 
           "\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\""}], "}"}], 
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "8"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<14\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<5\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{"\"\<\>\"", ",", "4"}], "]"}], "]"}]}], "}"}], "]"}], 
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "9"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"Black", ",", "25"}], "]"}], ",", "\"\<\>\""}], "}"}], 
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Row", " ", "10"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<4\>\"", ",", "15"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{"\"\<\>\"", ",", "6"}], "]"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"Black", ",", "25"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<7\>\"", ",", "15"}], "]"}], ",", "\"\<\>\""}], 
           "}"}], "]"}], "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.771694486482841*^9, 3.7716944930715923`*^9}, {
  3.771761344486516*^9, 3.771761368297015*^9}},
 CellLabel->
  "In[579]:=",ExpressionUUID->"c34d77ad-d2cc-4ee3-9d3a-392205ed611c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Lastly, I made two hint showing variables; one for horizontal and one for \
vertical.\
\>", "Subsubsection",
 CellChangeTimes->{{3.77169401651368*^9, 3.7716940281780863`*^9}, {
   3.771790900777563*^9, 3.771790929802532*^9}, 
   3.7717912910934763`*^9},ExpressionUUID->"76c31edc-cae8-4fb2-9408-\
f37d6c891131"],

Cell["\<\
These inputs use Column on a list in which each list calls upon the \
previously defined hint though a function.\
\>", "Text",
 CellChangeTimes->{{3.7717909375316153`*^9, 
  3.771790981487117*^9}},ExpressionUUID->"3e274813-767c-4947-b2a4-\
9156ded254b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"horizhintz", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Horizontal:\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 1: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word1", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 2: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word3", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 3: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word5", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 4: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word7", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 5: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word8", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 6: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word12", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 7: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word13", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<Hint 8: \>\"", ",", 
            RowBox[{"hintwordprep", "[", "Word14", "]"}], ",", "\"\<,\>\""}], 
           "]"}], ",", "15"}], "]"}]}], "}"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"verthintz", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Column", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Vertical:\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 9: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word2", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 10: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word4", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 11: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word6", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 12: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word9", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 13: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word10", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 14: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word11", "]"}], ",", "\"\<,\>\""}], 
          "]"}], ",", "15"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<Hint 15: \>\"", ",", 
           RowBox[{"hintwordprep", "[", "Word15", "]"}], ",", "\"\<.\>\""}], 
          "]"}], ",", "15"}], "]"}]}], "}"}], "]"}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.771694032734371*^9, 3.7716940726346083`*^9}, {
  3.77169423875215*^9, 3.7716942526766043`*^9}, {3.771694497050433*^9, 
  3.77169449842307*^9}, {3.771773779113451*^9, 3.7717737812111263`*^9}, {
  3.771773831860413*^9, 3.7717738380873203`*^9}},
 CellLabel->
  "In[619]:=",ExpressionUUID->"f5af7fcd-64de-4a21-b19c-3f3940dc1ffb"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Final Result Manipulate", "Chapter"]], "Section",
 CellChangeTimes->{{3.771667696031185*^9, 3.7716677202728033`*^9}, {
  3.771807524564129*^9, 
  3.771807526971937*^9}},ExpressionUUID->"1ecc267d-c79b-4c86-aa86-\
cbb19cbac6b5"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["I finally made a manipulate wherein there is a column \
of the title, instructions, hints, extra hints, word bank, crossword, \
checker, answer key, and an ending text to read. This was done cleanly and \
with buttons to make a nice output for the user to traverse.", \
"Subsubsection"]], "Subsection",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, 3.7715120467326717`*^9, {3.771522082872292*^9, 
   3.771522136358101*^9}, {3.771580129025537*^9, 3.77158017503506*^9}, {
   3.771580322910591*^9, 3.77158034902739*^9}, {3.771580491433296*^9, 
   3.7715804938173943`*^9}, {3.7715809657570543`*^9, 3.771580966913999*^9}, {
   3.7715810931784782`*^9, 3.771581121922473*^9}, {3.77166772893579*^9, 
   3.771667729283126*^9}, {3.7717910389458942`*^9, 
   3.771791153814752*^9}},ExpressionUUID->"cb30294e-628b-4ecf-8f5a-\
299af62ac79c"],

Cell["\<\
This input uses Column and lots of strings and variables in a manipulate to \
show the pre-text and the crossword, while also being able to show helpful \
hints by using previous variables and having buttons.\
\>", "Text",
 CellChangeTimes->{{3.771791158209591*^9, 
  3.771791258814878*^9}},ExpressionUUID->"97e84f37-44f0-48af-aef3-\
7b3bde3c09a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Framed", "[", 
  RowBox[{
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", "Title", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Crossword Creator!\>\"", ",", "Bold", ",", "50"}], 
         "]"}], ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", "Instuctions", "*)"}], "\[IndentingNewLine]", 
        "\"\<\>\"", ",", "\[IndentingNewLine]", 
        "\"\<Please fill the generated crossword.\>\"", ",", 
        "\[IndentingNewLine]", 
        "\"\<You can type in the words, but make sure to click on each box an \
insert only one letter per box.\>\"", ",", " ", "\[IndentingNewLine]", 
        "\"\<Fill the crossword with words which have the following HINTS: \>\
\"", ",", "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Hints", " ", "for", " ", "each", " ", "word"}], "*)"}], 
        "\[IndentingNewLine]", "horizhintz", ",", "\[IndentingNewLine]", 
        "\"\<\>\"", ",", "\[IndentingNewLine]", "verthintz", ",", 
        "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Extra", " ", "Hints", " ", "Option", " ", "for", " ", "first", " ", 
          "letter", " ", "of", " ", "Words"}], "*)"}], "\[IndentingNewLine]", 
        "HintFirstLetters", ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Extra", " ", "Hints", " ", "Option", " ", "for", " ", "Length", " ",
           "of", " ", "Words"}], "*)"}], "\[IndentingNewLine]", "HintLength", 
        ",", "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Wordbank", " ", "Option", " ", "containing", " ", "shuffled", " ", 
          "list", " ", "of", " ", "words"}], "*)"}], "\[IndentingNewLine]", 
        "Wordbank", ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "The", " ", "follwowing", " ", "gives", " ", "the", " ", 
          "postiotion", " ", "of", " ", "each", " ", "word", " ", "in", " ", 
          "a", " ", "mini", " ", "crossword"}], "*)"}], "\[IndentingNewLine]",
         "minicross", ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "The", " ", "following", " ", "code", " ", "makes", " ", "a", " ", 
          "blank", " ", "10", "x10", " ", "crossword", " ", "in", " ", "the", 
          " ", "form", " ", "of", " ", "a", " ", "grid"}], "*)"}], 
        "\[IndentingNewLine]", "fillercross", ",", "\[IndentingNewLine]", 
        "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Soultuion", " ", "Checker", " ", "option"}], "*)"}], 
        "\[IndentingNewLine]", "SolutionChecker", ",", "\[IndentingNewLine]", 
        "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Answer", " ", "Key", " ", "of", " ", "the", " ", "crossword", " ", 
          "option"}], "*)"}], "\[IndentingNewLine]", "Answers", " ", ",", 
        "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Ending", " ", "text", " ", "to", " ", "\"\<send off\>\"", " ", 
          "the", " ", "user", " ", "in", " ", "a", " ", "way"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{
         "\"\<Thank you for playing and have a great day!\>\"", " ", ",", 
          "50", ",", "Italic"}], "]"}]}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Making", " ", "buttons"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"HintFirstLetters", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<\>\"", "\[Rule]", "\"\<Hide\>\""}], ",", 
         RowBox[{"firstletters", "\[Rule]", "\"\<Show\>\""}]}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"HintLength", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<\>\"", "\[Rule]", "\"\<Hide\>\""}], ",", 
         RowBox[{"hintlength", "\[Rule]", "\"\<Show\>\""}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"Wordbank", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<\>\"", "\[Rule]", "\"\<Hide\>\""}], ",", 
         RowBox[{"wordbank", "\[Rule]", "\"\<Show\>\""}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"Answers", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<\>\"", "\[Rule]", "\"\<Hide\>\""}], ",", 
         RowBox[{"showanswers", "\[Rule]", "\"\<Show\>\""}]}], "}"}]}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"SolutionChecker", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<\>\"", "\[Rule]", "\"\<Not Yet\>\""}], ",", 
         RowBox[{"solvecheck", "\[Rule]", "\"\<Check!\>\""}]}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"ImageMargins", "\[Rule]", "Large"}]}], "]"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771511706833984*^9, 3.7715117787835207`*^9}, 
   3.771512007578301*^9, 3.7715120467326717`*^9, {3.771522082872292*^9, 
   3.771522136358101*^9}, {3.771580129025537*^9, 3.77158017503506*^9}, 
   3.771580322910591*^9, {3.7715803548835793`*^9, 3.771580371227538*^9}, {
   3.771580577581875*^9, 3.771581011969866*^9}, {3.77158127623545*^9, 
   3.7715812799476967`*^9}, {3.77158160992489*^9, 3.771581627220478*^9}, {
   3.771587812124318*^9, 3.771587814468884*^9}, {3.771587878988658*^9, 
   3.771587882254339*^9}, {3.7715879149405193`*^9, 3.771587932669112*^9}, {
   3.7715879921952057`*^9, 3.771588053276065*^9}, {3.771588172476845*^9, 
   3.771588205983345*^9}, {3.77158831384382*^9, 3.7715884937996273`*^9}, {
   3.771588531429998*^9, 3.7715885862503843`*^9}, {3.771588647632407*^9, 
   3.771588674604989*^9}, {3.771588704692547*^9, 3.771588733999675*^9}, {
   3.7715887955813837`*^9, 3.771588864405533*^9}, {3.771588929798482*^9, 
   3.771588934657196*^9}, {3.771588996899934*^9, 3.77158899699093*^9}, {
   3.771589027106985*^9, 3.771589089677164*^9}, {3.771589123268011*^9, 
   3.771589134998991*^9}, {3.771589206099753*^9, 3.771589257312932*^9}, {
   3.771589313802537*^9, 3.771589377252232*^9}, {3.771589417344207*^9, 
   3.77158942702022*^9}, {3.771589509785696*^9, 3.771589526727071*^9}, {
   3.771589631494411*^9, 3.771589652301449*^9}, {3.7715897633071012`*^9, 
   3.77158990104397*^9}, {3.771589960927359*^9, 3.7715899772707253`*^9}, {
   3.771597786179673*^9, 3.771597835472278*^9}, {3.771599384271473*^9, 
   3.771599407369516*^9}, {3.771599797052837*^9, 3.7715998129801607`*^9}, {
   3.771599964569777*^9, 3.771599985554598*^9}, {3.771600050444791*^9, 
   3.771600061107321*^9}, {3.7716001850871267`*^9, 3.771600185903432*^9}, {
   3.771600605224058*^9, 3.771600741012301*^9}, {3.771600917099037*^9, 
   3.771601003057383*^9}, {3.771601141543723*^9, 3.771601146236795*^9}, {
   3.77160130752843*^9, 3.7716013305939007`*^9}, {3.77160142851812*^9, 
   3.77160163090661*^9}, {3.771601706441431*^9, 3.771602102900711*^9}, 
   3.771602197200165*^9, {3.771609555816732*^9, 3.7716095735478783`*^9}, {
   3.771609636450399*^9, 3.7716097050184183`*^9}, 3.771614167705476*^9, {
   3.771615517655829*^9, 3.7716155188290453`*^9}, {3.771616496804412*^9, 
   3.771616502167815*^9}, {3.771616960577202*^9, 3.7716169634044313`*^9}, {
   3.7716676340237827`*^9, 3.771667650029393*^9}, {3.771667828394957*^9, 
   3.771667883027768*^9}, {3.771667960405707*^9, 3.771667960801001*^9}, {
   3.7716940852798233`*^9, 3.771694092563594*^9}, 3.771694262138275*^9, {
   3.771694506076682*^9, 3.771694519350019*^9}, {3.771791003702015*^9, 
   3.771791017937709*^9}},ExpressionUUID->"95d0080c-e791-4035-becf-\
48b53d271b86"],

Cell[BoxData[
 FrameBox[
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`Answers$$ = 
     "", $CellContext`HintFirstLetters$$ = "", $CellContext`HintLength$$ = 
     "", $CellContext`SolutionChecker$$ = "", $CellContext`Wordbank$$ = "", 
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`HintFirstLetters$$], {
       "" -> "Hide", 
        "First Letters of Hints: Hint 1: r, Hint 2: t, Hint 3: s, Hint 4: a, \
Hint 5: s, Hint 6: z, Hint 7: a, Hint 8: s, Hint 9: I, Hint 10: p, Hint 11: \
I, Hint 12: p, Hint 13: o, Hint 14: z, Hint 15: w." -> "Show"}}, {
       Hold[$CellContext`HintLength$$], {
       "" -> "Hide", 
        "Lengths of Hints: Hint 1: 9, Hint 2: 5, Hint 3: 8, Hint 4: 7, Hint \
5: 5, Hint 6: 3, Hint 7: 1, Hint 8: 2, Hint 9: 7, Hint 10: 10, Hint 11: 8, \
Hint 12: 7, Hint 13: 3, Hint 14: 3, Hint 15: 5." -> "Show"}}, {
       Hold[$CellContext`Wordbank$$], {
       "" -> "Hide", 
        "Wordbank: sad sack, agnosia, tramp, phocomelia, tab, weeds, I Esdra, \
red shift, oft, Isoptera, zoo, slain, aa, si, piranha." -> "Show"}}, {
       Hold[$CellContext`Answers$$], {"" -> "Hide", Grid[{{
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["w", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["I", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["p", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["o", 50], 
            Style[
             GrayLevel[0], 50]}, {
            Style[
             GrayLevel[0], 50], 
            Style["r", 50], 
            Style["e", 50], 
            Style["d", 50], 
            Style[" ", 50], 
            Style["s", 50], 
            Style["h", 50], 
            Style["i", 50], 
            Style["f", 50], 
            Style["t", 50]}, {
            Style["I", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["e", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["E", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["o", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["t", 50], 
            Style[
             GrayLevel[0], 50]}, {
            Style["s", 50], 
            Style["a", 50], 
            Style["d", 50], 
            Style[" ", 50], 
            Style["s", 50], 
            Style["a", 50], 
            Style["c", 50], 
            Style["k", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["p", 50]}, {
            Style["o", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["s", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["d", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["o", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["s", 50], 
            Style["i", 50]}, {
            Style["p", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["t", 50], 
            Style["r", 50], 
            Style["a", 50], 
            Style["m", 50], 
            Style["p", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["r", 50]}, {
            Style["t", 50], 
            Style["a", 50], 
            Style["b", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["a", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["e", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["a", 50]}, {
            Style["e", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["z", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["s", 50], 
            Style["l", 50], 
            Style["a", 50], 
            Style["i", 50], 
            Style["n", 50]}, {
            Style["r", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["o", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["i", 50], 
            Style[
             GrayLevel[0], 50], 
            Style[
             GrayLevel[0], 50], 
            Style["h", 50]}, {
            Style["a", 50], 
            Style["g", 50], 
            Style["n", 50], 
            Style["o", 50], 
            Style["s", 50], 
            Style["i", 50], 
            Style["a", 50], 
            Style[
             GrayLevel[0], 50], 
            Style["a", 50], 
            Style["a", 50]}}, Frame -> All] -> "Show"}}, {
       Hold[$CellContext`SolutionChecker$$], {"" -> "Not Yet", Dynamic[
          If[StringDrop[
             StringDrop[
              StringReplace[
               ToString[$CellContext`input], "Null" -> " "], 1], -1] == 
           StringDrop[
             StringDrop[
              ToLowerCase[
               ToString[$CellContext`correctlist]], 1], -1], 
           Style[
            $CellContext`colorize2["This is correct!", 
             ColorData["Rainbow"]], Bold, 140], 
           Style["Sorry... try again...", Bold, 40]]] -> "Check!"}}}, 
     Typeset`size$$ = {998., {777.3505249023438, 781.6494750976562}}, 
     Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
     True, $CellContext`HintFirstLetters$3118287$$ = 
     False, $CellContext`HintLength$3118288$$ = 
     False, $CellContext`Wordbank$3118289$$ = 
     False, $CellContext`Answers$3118290$$ = 
     False, $CellContext`SolutionChecker$3118291$$ = False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, 
       "Variables" :> {$CellContext`Answers$$ = 
         "" -> "Hide", $CellContext`HintFirstLetters$$ = 
         "" -> "Hide", $CellContext`HintLength$$ = 
         "" -> "Hide", $CellContext`SolutionChecker$$ = 
         "" -> "Not Yet", $CellContext`Wordbank$$ = "" -> "Hide"}, 
       "ControllerVariables" :> {
         Hold[$CellContext`HintFirstLetters$$, \
$CellContext`HintFirstLetters$3118287$$, False], 
         Hold[$CellContext`HintLength$$, $CellContext`HintLength$3118288$$, 
          False], 
         Hold[$CellContext`Wordbank$$, $CellContext`Wordbank$3118289$$, 
          False], 
         Hold[$CellContext`Answers$$, $CellContext`Answers$3118290$$, False], 
         
         Hold[$CellContext`SolutionChecker$$, \
$CellContext`SolutionChecker$3118291$$, False]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Style["Crossword Creator!", Bold, 50], "", "", 
          "Please fill the generated crossword.", 
          "You can type in the words, but make sure to click on each box an \
insert only one letter per box.", 
          "Fill the crossword with words which have the following HINTS: ", 
          "", $CellContext`horizhintz, "", $CellContext`verthintz, 
          "", $CellContext`HintFirstLetters$$, "", $CellContext`HintLength$$, 
          "", $CellContext`Wordbank$$, "", $CellContext`minicross, 
          "", $CellContext`fillercross, "", $CellContext`SolutionChecker$$, 
          "", $CellContext`Answers$$, "", 
          Style["Thank you for playing and have a great day!", 50, Italic]}], 
       "Specifications" :> {{$CellContext`HintFirstLetters$$, {
          "" -> "Hide", 
           "First Letters of Hints: Hint 1: r, Hint 2: t, Hint 3: s, Hint 4: \
a, Hint 5: s, Hint 6: z, Hint 7: a, Hint 8: s, Hint 9: I, Hint 10: p, Hint \
11: I, Hint 12: p, Hint 13: o, Hint 14: z, Hint 15: w." -> 
           "Show"}}, {$CellContext`HintLength$$, {
          "" -> "Hide", 
           "Lengths of Hints: Hint 1: 9, Hint 2: 5, Hint 3: 8, Hint 4: 7, \
Hint 5: 5, Hint 6: 3, Hint 7: 1, Hint 8: 2, Hint 9: 7, Hint 10: 10, Hint 11: \
8, Hint 12: 7, Hint 13: 3, Hint 14: 3, Hint 15: 5." -> 
           "Show"}}, {$CellContext`Wordbank$$, {
          "" -> "Hide", 
           "Wordbank: sad sack, agnosia, tramp, phocomelia, tab, weeds, I \
Esdra, red shift, oft, Isoptera, zoo, slain, aa, si, piranha." -> 
           "Show"}}, {$CellContext`Answers$$, {"" -> "Hide", Grid[{{
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["w", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["I", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["p", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["o", 50], 
               Style[
                GrayLevel[0], 50]}, {
               Style[
                GrayLevel[0], 50], 
               Style["r", 50], 
               Style["e", 50], 
               Style["d", 50], 
               Style[" ", 50], 
               Style["s", 50], 
               Style["h", 50], 
               Style["i", 50], 
               Style["f", 50], 
               Style["t", 50]}, {
               Style["I", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["e", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["E", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["o", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["t", 50], 
               Style[
                GrayLevel[0], 50]}, {
               Style["s", 50], 
               Style["a", 50], 
               Style["d", 50], 
               Style[" ", 50], 
               Style["s", 50], 
               Style["a", 50], 
               Style["c", 50], 
               Style["k", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["p", 50]}, {
               Style["o", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["s", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["d", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["o", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["s", 50], 
               Style["i", 50]}, {
               Style["p", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["t", 50], 
               Style["r", 50], 
               Style["a", 50], 
               Style["m", 50], 
               Style["p", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["r", 50]}, {
               Style["t", 50], 
               Style["a", 50], 
               Style["b", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["a", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["e", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["a", 50]}, {
               Style["e", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["z", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["s", 50], 
               Style["l", 50], 
               Style["a", 50], 
               Style["i", 50], 
               Style["n", 50]}, {
               Style["r", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["o", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["i", 50], 
               Style[
                GrayLevel[0], 50], 
               Style[
                GrayLevel[0], 50], 
               Style["h", 50]}, {
               Style["a", 50], 
               Style["g", 50], 
               Style["n", 50], 
               Style["o", 50], 
               Style["s", 50], 
               Style["i", 50], 
               Style["a", 50], 
               Style[
                GrayLevel[0], 50], 
               Style["a", 50], 
               Style["a", 50]}}, Frame -> All] -> 
           "Show"}}, {$CellContext`SolutionChecker$$, {
          "" -> "Not Yet", Dynamic[
             If[StringDrop[
                StringDrop[
                 StringReplace[
                  ToString[$CellContext`input], "Null" -> " "], 1], -1] == 
              StringDrop[
                StringDrop[
                 ToLowerCase[
                  ToString[$CellContext`correctlist]], 1], -1], 
              Style[
               $CellContext`colorize2["This is correct!", 
                ColorData["Rainbow"]], Bold, 140], 
              Style["Sorry... try again...", Bold, 40]]] -> "Check!"}}}, 
       "Options" :> {ImageMargins -> Large}, "DefaultOptions" :> {}],
      ImageSizeCache->{1049., {862., 866.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  FrameMargins->0,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.7715892582355328`*^9, 3.771589379864702*^9, 3.77158942770732*^9, 
   3.771589528047922*^9, 3.771589978037204*^9, 3.771597821499153*^9, 
   3.771597925643483*^9, 3.771599815250032*^9, 3.771599986574923*^9, 
   3.7716000622960653`*^9, 3.7716001992766113`*^9, 3.77160088899837*^9, 
   3.771600922401947*^9, 3.771601011350946*^9, 3.771601332802643*^9, 
   3.771601383825079*^9, 3.771601633366562*^9, 3.771601772447723*^9, 
   3.771602108824695*^9, 3.7716021987202663`*^9, 3.771602279447753*^9, 
   3.771609706566248*^9, 3.771609882086075*^9, 3.7716127801279593`*^9, 
   3.771612931256156*^9, 3.7716141706951027`*^9, 3.771615240207708*^9, 
   3.771615298263431*^9, 3.7716155203176947`*^9, {3.771616960835722*^9, 
   3.771616964379085*^9}, 3.771617073812161*^9, {3.771667644136136*^9, 
   3.771667650684194*^9}, {3.771667833983395*^9, 3.7716678865477543`*^9}, 
   3.77166796343674*^9, {3.7716760680225782`*^9, 3.771676094425734*^9}, 
   3.771678090250937*^9, 3.771684587772781*^9, 3.7716942642368193`*^9, 
   3.771694699036415*^9, 3.771755759587167*^9, 3.77175598717413*^9, 
   3.771758210559146*^9, {3.7717584693392763`*^9, 3.771758498471451*^9}, 
   3.771760802367806*^9, 3.771760954192272*^9, 3.7717610179338923`*^9, 
   3.771761450920537*^9, 3.7717615162343187`*^9, 3.7717617555667048`*^9, 
   3.7717624248719807`*^9, {3.771762460489149*^9, 3.771762509761034*^9}, 
   3.77176254363953*^9, 3.77176264055009*^9, 3.7717627189186068`*^9, 
   3.771762753762611*^9, 3.771762819389764*^9, 3.771762911357553*^9, 
   3.771762961961175*^9, 3.771762999780517*^9, 3.7717630621471567`*^9, {
   3.771763247522039*^9, 3.7717632651049213`*^9}, 3.771773909330722*^9, 
   3.771787607968956*^9},
 CellLabel->
  "Out[582]=",ExpressionUUID->"54e58fb5-92fe-4064-86b5-66589c4c4232"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Conclusion", "Chapter"]], "Section",
 CellChangeTimes->{{3.771794905278514*^9, 3.771794915755816*^9}, {
  3.771807530449068*^9, 
  3.771807532094735*^9}},ExpressionUUID->"0f703dd3-8980-41dd-af84-\
937024faaef7"],

Cell[TextData[{
 " ",
 StyleBox["    Throughout the entire process of creating and accomplishing \
goals in this project, I have learned several things and figured out how to \
do many processes in an easier and more efficient way. I started with the \
small steps of merely trying to overlay words, but that \
didn\[CloseCurlyQuote]t work so well. After much thinking,  I moved onto \
using grid. Once this was semi-functioning, I added black squares and white \
blank spaces into the format of the grid. With this working, I continued on \
and added spaces for words to get a set crossword pattern. After a couple \
days, I had the huge and amazing number of a whopping fifteen words in the \
crossword! I used word data to pick words based on the position of letters, \
for example if the first word is \[OpenCurlyDoubleQuote]Wolfram\
\[CloseCurlyDoubleQuote], I would pick a word whose second letter is the \
sixth letter in the first word, one such word being \
\[OpenCurlyDoubleQuote]Language\[CloseCurlyDoubleQuote].  I then used several \
associations of these words to add them into the crossword by calling the \
number associated with each letter. I also added hints based on the first \
dictionary definitions of each word. Finally, I refactored my code so that I \
got rid of over sixty variables, which helped the loom and functionality of \
the project. Then, I cleaned up the manipulate and made everything look nice \
and organized in the output cell. In the near future, a incredibly hard, but \
possible, improvement could be randomizing the layout of each crossword every \
time the user evaluates the code. This would allow for a true random \
crossword generator, but sadly, due to the time restraint, I was not able to \
finish this goal. However, I feel that I have still accomplished the main \
goal of making a crossword generator, since I made a new interactive \
crossword that is difficult yet possible to solve. In creating and working on \
this project, I learnt to continue to try, even when it seems impossible, and \
also to set incredibly high goals. By using these two teachings, I was able \
to make the most of this experience and truly grow as a coder and a human \
being.", "Section"]
}], "Subsubsection",
 CellChangeTimes->{{3.7718041456058903`*^9, 3.771804180697517*^9}, {
   3.7718042176220093`*^9, 3.7718042178091927`*^9}, {3.771804399448995*^9, 
   3.771804401166769*^9}, {3.771804452400291*^9, 3.771804473837335*^9}, {
   3.771806502527459*^9, 3.771806536999483*^9}, {3.7718066635156717`*^9, 
   3.771806757272299*^9}, {3.7718068192542877`*^9, 3.771807058932358*^9}, {
   3.771807123768402*^9, 3.771807199989408*^9}, {3.771807269023377*^9, 
   3.77180739522152*^9}, 
   3.771844188928316*^9},ExpressionUUID->"54b27e26-e6ad-4a04-90c4-\
7b13ded9f479"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{360, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
Magnification:>0.75 Inherited,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 348, 5, 75, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],
Cell[931, 29, 404, 6, 27, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[1338, 37, 400, 6, 27, "Text",ExpressionUUID->"b70c649b-a958-4202-9f22-238ea1f9c7d4"],
Cell[CellGroupData[{
Cell[1763, 47, 248, 4, 57, "Section",ExpressionUUID->"437c8e66-61b7-4631-9460-b8aa25894cd4"],
Cell[CellGroupData[{
Cell[2036, 55, 372, 7, 34, "Subsubsection",ExpressionUUID->"b819bb3d-7df0-46f9-b1b1-9a5790c6653d"],
Cell[2411, 64, 343, 7, 27, "Text",ExpressionUUID->"c062b9c4-31b8-4207-9b51-7854e0b694c2"],
Cell[CellGroupData[{
Cell[2779, 75, 556, 15, 24, "Input",ExpressionUUID->"c0f2c6d5-1c39-4a93-99ad-d3cad0002830"],
Cell[3338, 92, 600, 18, 66, "Output",ExpressionUUID->"9bbebc4b-b5c3-46dd-a139-d937282db202"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3987, 116, 351, 7, 34, "Subsubsection",ExpressionUUID->"f33f3248-170d-416b-a803-38b4626fea15"],
Cell[4341, 125, 214, 5, 27, "Text",ExpressionUUID->"c10a770b-632c-4fda-88d7-d2008f55dce9"],
Cell[CellGroupData[{
Cell[4580, 134, 782, 24, 24, "Input",ExpressionUUID->"5d31b6af-2858-4f24-93ab-d380f52388e8"],
Cell[5365, 160, 595, 13, 78, "Output",ExpressionUUID->"0e354969-8dcd-4e2c-a0b3-71b0e171c48c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6009, 179, 410, 8, 34, "Subsubsection",ExpressionUUID->"eff4c043-fd97-4960-b0bb-8dcb34a63c93"],
Cell[6422, 189, 315, 7, 27, "Text",ExpressionUUID->"b4fc16fc-8c1c-4983-b65f-21fd9f95d3a0"],
Cell[CellGroupData[{
Cell[6762, 200, 474, 11, 24, "Input",ExpressionUUID->"8c32d05b-46e0-4cc2-8166-a019c8fcdd88"],
Cell[7239, 213, 155, 3, 27, "Output",ExpressionUUID->"0136d389-6cc5-4254-b674-ebe1bc710883"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7443, 222, 380, 8, 34, "Subsubsection",ExpressionUUID->"f4ad6d7d-0e0d-46fe-b034-f2b13b53f7df"],
Cell[7826, 232, 422, 8, 27, "Text",ExpressionUUID->"d409f62e-fab2-49d2-9dc4-3557a6d6adb7"],
Cell[8251, 242, 3561, 100, 201, "Input",ExpressionUUID->"92e91de2-5eba-470c-baf2-1005b225c5c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11849, 347, 321, 7, 34, "Subsubsection",ExpressionUUID->"68ea7ded-47e1-4c2d-b22a-7ff27f168509"],
Cell[12173, 356, 335, 7, 27, "Text",ExpressionUUID->"fa67d7a5-6efb-4967-b7bb-cea7e3f10cb9"],
Cell[CellGroupData[{
Cell[12533, 367, 1396, 37, 41, "Input",ExpressionUUID->"48c1abb9-533b-492e-a126-4884dcfd7cfa"],
Cell[13932, 406, 76560, 1876, 144, "Output",ExpressionUUID->"5dcd2926-a0dd-4aec-b2cf-5c30d75e322d"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[90553, 2289, 253, 4, 47, "Section",ExpressionUUID->"05f2bcaa-ccd7-49d1-b7ba-1fb096457cc3"],
Cell[CellGroupData[{
Cell[90831, 2297, 498, 9, 41, "Subsection",ExpressionUUID->"8cc7d6a5-21f9-48c3-9bd2-8aac6992e255"],
Cell[CellGroupData[{
Cell[91354, 2310, 379, 8, 34, "Subsubsection",ExpressionUUID->"e3acd316-25e4-450e-b24f-099a4da38599"],
Cell[91736, 2320, 251, 3, 27, "Text",ExpressionUUID->"ccd87962-3fc0-4294-af52-ba75d8f14a94"],
Cell[91990, 2325, 1021, 17, 41, "Input",ExpressionUUID->"018497b1-d31c-41a7-925b-97a3677a97a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93048, 2347, 437, 8, 34, "Subsubsection",ExpressionUUID->"18943376-a52b-44fc-b84b-0457eab12b10"],
Cell[93488, 2357, 283, 6, 27, "Text",ExpressionUUID->"534de0b9-5eb6-4260-8042-c8333f295057"],
Cell[CellGroupData[{
Cell[93796, 2367, 634, 17, 25, "Input",ExpressionUUID->"87d4994d-63dd-4949-8628-8bbedb0846b9"],
Cell[94433, 2386, 9434, 242, 81, "Output",ExpressionUUID->"de67136b-6f4a-43bb-86a7-5aafcb480500"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[103916, 2634, 495, 9, 34, "Subsubsection",ExpressionUUID->"aa4f6fb3-b9ce-4b49-8fc7-6ec64fa93687"],
Cell[104414, 2645, 364, 7, 27, "Text",ExpressionUUID->"f4d8429f-2d36-4987-8688-e28a3c341e0b"],
Cell[104781, 2654, 2793, 65, 185, "Input",ExpressionUUID->"71dddbf0-4042-4bf5-8d05-e9bfc9b883ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107611, 2724, 851, 14, 74, "Subsubsection",ExpressionUUID->"37152a49-75f5-459a-9227-9f888040f78c"],
Cell[108465, 2740, 297, 6, 27, "Text",ExpressionUUID->"911249c8-7e8d-4a8d-8056-9d690f38677d"],
Cell[108765, 2748, 7138, 194, 249, "Input",ExpressionUUID->"bb3df474-3bc6-4682-8c63-efc4c6c593bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115940, 2947, 618, 10, 54, "Subsubsection",ExpressionUUID->"3def84c7-a647-46f9-8f92-87c3edc877b1"],
Cell[116561, 2959, 309, 7, 27, "Text",ExpressionUUID->"0f4ac54b-2cbc-4df3-9c0d-c1d376c4dc49"],
Cell[116873, 2968, 5573, 121, 265, "Input",ExpressionUUID->"ba591f8b-8a7c-4902-9f14-9a6d921c59ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122483, 3094, 675, 11, 34, "Subsubsection",ExpressionUUID->"85e5056c-a3dd-4e9d-9f51-8482fed97048"],
Cell[123161, 3107, 388, 8, 27, "Text",ExpressionUUID->"73962f69-25dc-40b7-884d-aacb6110a929"],
Cell[CellGroupData[{
Cell[123574, 3119, 14002, 363, 441, "Input",ExpressionUUID->"5019dfcf-f90b-4d5a-9cbc-35c841232830"],
Cell[137579, 3484, 63855, 1781, 412, "Output",ExpressionUUID->"09b2443a-27f0-47be-a4ca-0a724e858587"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[201483, 5271, 554, 10, 34, "Subsubsection",ExpressionUUID->"5acd3556-eca0-4dbf-9f80-1f8b33360889"],
Cell[202040, 5283, 348, 7, 27, "Text",ExpressionUUID->"5d3c7ad7-2dcd-44e4-9123-50e93b3afe07"],
Cell[202391, 5292, 4597, 108, 297, "Input",ExpressionUUID->"aaf32241-e359-4a06-ba51-d8112200b314"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207025, 5405, 463, 8, 34, "Subsubsection",ExpressionUUID->"64925cbd-99e2-4d4a-badf-54527df4677d"],
Cell[207491, 5415, 380, 5, 27, "Text",ExpressionUUID->"9d6209ff-a2b1-4ff7-b4c4-19995966ea92"],
Cell[CellGroupData[{
Cell[207896, 5424, 7718, 194, 345, "Input",ExpressionUUID->"f1feb3ff-fc70-4112-a927-fc25b8efef3a"],
Cell[215617, 5620, 2099, 30, 44, "Output",ExpressionUUID->"4bba5503-c3c1-4ec1-815a-becf8c30f5a2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[217765, 5656, 518, 9, 34, "Subsubsection",ExpressionUUID->"823051a6-d3fe-46be-8c4a-93c1f8081073"],
Cell[218286, 5667, 320, 7, 27, "Text",ExpressionUUID->"1e0d9d77-fc81-4bb3-9cd6-5244f0494f91"],
Cell[218609, 5676, 2275, 59, 57, "Input",ExpressionUUID->"d322f934-cbcc-4b52-9777-8f73ef3b9b63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220921, 5740, 414, 8, 34, "Subsubsection",ExpressionUUID->"09ba9118-43e4-43ea-bddd-2476d28030b6"],
Cell[221338, 5750, 321, 6, 27, "Text",ExpressionUUID->"5242248f-cecd-4054-bac0-4710524b2bb0"],
Cell[221662, 5758, 8817, 199, 537, "Input",ExpressionUUID->"c34d77ad-d2cc-4ee3-9d3a-392205ed611c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230516, 5962, 320, 7, 34, "Subsubsection",ExpressionUUID->"76c31edc-cae8-4fb2-9408-f37d6c891131"],
Cell[230839, 5971, 264, 6, 27, "Text",ExpressionUUID->"3e274813-767c-4947-b2a4-9156ded254b2"],
Cell[231106, 5979, 5568, 130, 537, "Input",ExpressionUUID->"f5af7fcd-64de-4a21-b19c-3f3940dc1ffb"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[236735, 6116, 250, 4, 47, "Section",ExpressionUUID->"1ecc267d-c79b-4c86-aa86-cbb19cbac6b5"],
Cell[CellGroupData[{
Cell[237010, 6124, 898, 13, 60, "Subsection",ExpressionUUID->"cb30294e-628b-4ecf-8f5a-299af62ac79c"],
Cell[237911, 6139, 358, 7, 27, "Text",ExpressionUUID->"97e84f37-44f0-48af-aef3-7b3bde3c09a9"],
Cell[CellGroupData[{
Cell[238294, 6150, 8039, 152, 681, "Input",ExpressionUUID->"95d0080c-e791-4035-becf-48b53d271b86"],
Cell[246336, 6304, 15804, 416, 1745, "Output",ExpressionUUID->"54e58fb5-92fe-4064-86b5-66589c4c4232"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[262201, 6727, 235, 4, 57, "Section",ExpressionUUID->"0f703dd3-8980-41dd-af84-937024faaef7"],
Cell[262439, 6733, 2795, 41, 413, "Subsubsection",ExpressionUUID->"54b27e26-e6ad-4a04-90c4-7b13ded9f479"]
}, Open  ]]
}, Open  ]]
}
]
*)

